//? Задания

//* 1
// Вызвать функцию по клику на кнопку но при этом не вызывая ее сразу.  Два способа.

//* 2
// Деструктурировать evt target в котором есть атрибут name и введеное значение

//* 3
// Поменять булево значение переменной на противоположное

//* 4
// Убрать пустые строки в начале строки

//* 5
// Упросить messageLength: messageLength >= MaxLengthMessage ? false : true

//* 6
// Создать документ фрагмент и в него добавить склонированные ноды разметки

//* 7
// Постоянное удаление элементов в списке в ДОМе

//* 8
// Обновить массив добавив в него один элемент в середине массива. Склеить два массива. Склеить два объекта. Обновить в объекте один ключ со значением

//* 9
// Reduce. Посчитать среднее число. Посчитать количество джидаев. Сохранить все имена джидаев. Сохранить в объект в одно поле весь текст, а в другое всех авторов.
{
    const numbers = [2, 3, 11, 15, 20, 3, 5, 8, 10, 16, 2, 11, 14, 15, 18];

    const users = [{
        username: "lando12",
        jedi: false
    }, {
        username: "kvaigon99",
        jedi: true
    }, {
        username: "anakin skywalker",
        jedi: false // DARK SIDE ISN'T JEDI WAY!!!
    }, {
        username: "littlegreenpug",
        jedi: true
    }, {
        username: "ray",
        jedi: true
    }, {
        username: "padmebestqueenever",
        jedi: false
    }];

    const documents = [{
        content: "Ты был мне как брат! Я любил тебя!",
        author: "Obi-Wan Kenobi",
        date: "2017-01-17 07:13:07"
    }, {
        content: "База повстанцев находится на Дантуине.",
        author: "Leia Organa",
        date: "1999-02-19 16:56:11"
    }, {
        content: "Страх открывает доступ к темной стороне! Страх рождает гнев, гнев рождает ненависть, ненависть — залог страданий.",
        author: "Yoda",
        date: "2019-11-27 21:33:56"
    }];
}

//* 10
// Заполнить массив числами. Удалить из массива чисел элементы с 4 индекса и добавить три других элемента. Вырезать массив с 2 по 5 элемент. Найти индекс элемента в массиве. Проверить содержит ли массив элемент да или нет. 

//* 11
// Разбить строку на массив и наоборот.

//* 12
// Проверить массивом ли является что-то

//* 13
// Найти индекс элемента в массиве который равен чему-то

//* 14
// Иметь возможность умножать все числа в массивах на три легко.

//* 15
// Создать массив из 10 пустых элементов

//* 16
// Убрать повторяющиеся числа в массиве

//* 17
// Соеденить два массива. Приэтом первый сначала до середины, а второй с середины до окнца

//* 18
// Создать пустой массив нужной длины. Узнать максимальное число из двух массивов.

//* 19
// Как работает axios. Сделать виртуальный запрос на https://httpbin.org/get

//* 20
// Отсортировать по дням точки. Дни - в объекте числа. Точки - любые данные.

//* 21
// Получить ключи, значения и то и другое объекта. Соеденить два объекта. Проверить есть ли в объекте ключ с определенным значением.

//* 22
// Сделать из объекта и массива строки. Сделать наоборот. Сделать глубокое копирвоание объекта. Создать объект из пар в массиве. Удалить из объекта ключ с его значением.

//* 23
// Создать объект с прототипом, ключами со значениями, создать геттеры и сеттеры и воспользоваться ими.

//* 24
// Добавить всем объектам возможность выводить в консоль свои ключи

//* 25
// Создать пустой массив нужной длины. Сделать из строки массив с элементами - буквами с помощью ...

//* 26
// Как работает серис воркеры. Теория.  Фишки девтулз по отладке. 

//* 27
// Вызвать ф-ию с контекстом объекта и вывести в консоль результат работы фу-ии учитывая ее новый контекст. Сделать тоже самое но передать псевдомассив в качестве аргумента. Привязать одной ф-ии разные контексты и вызывать ее с разными контекстами. В чем отличие call, apply и bind.

//* 28
// Сохранить в переменную параметры фу-ии. Сделать из параметров массив и узнать его длину. Передать параметры в ф-ию как оставшиеся параметры.

//* 29
// Семь типов данных. Как проверить тип. В чем отличие == и ===. Тип пустого объекта и массива. Что такое хойстинг и есть ли он у let, const и var. Так же влияние на хойстинг FE и FD. Что такое замыкание. Что такое вышестоящий Scope и какое отношение он иметт к замыканиям. Написать пример замыкания. Для чего нужен IIFА и как можно это использовать в примере с циклом for и замыканием.

//* 30
// Доступен ли this в FE функциях для параметров и переменных. Создать пример. Является ли такая ф-ия по сути классом.

//* 31
// Как правильно дать определение тому как определяется контекст ? Где и как ?

//* 32
// Как работает движок JS ? Что такое callstack, WepAPI, eventLoop и как это все работает. И есть ли в движке JS setTimeout, xhr и прочая ассинхронщина ? Разница в схеме работы запуска ф-ии с коллбеком (ф-ия которая вызывает другую ф-ию) что в результате вызовет выполннение синхронного кода с блокировкой стека и асинхронным выполнением кода когда например исп-ся setTimeout. В чем разница и почему асинхронный код не блокирует стек ? Что происходит между очищением стека и появлением в нем новых инструкций ? К чему приведет зсорение колстек 'тяжелыми' вызовами ?

//* 32
// Объеденить массив в строку через разделитель и потом строку в массив через символ 
